type WhitelistedToken = 
 record {
   decimals: nat8;
   fee: nat;
   ledger_id: principal;
   name: text;
   standard: text;
   symbol: text;
 };
type TxIndex = nat;
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type TransferPositionResult = 
 variant {
   err: TransferPositionError;
   ok: bool;
 };
type TransferPositionError = 
 variant {
   CommonError;
   InsufficientFunds;
   InternalError: text;
   UnsupportedToken: text;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Balance;};
   BadFee: record {expected_fee: Balance;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Balance;};
   TemporarilyUnavailable;
   TooOld;
 };
type TokenMetaValue = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TokenMeta = 
 record {
   token0: vec record {
                 text;
                 TokenMetaValue;
               };
   token1: vec record {
                 text;
                 TokenMetaValue;
               };
 };
type Timestamp = nat64;
type Result_5 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_4 = 
 variant {
   err: text;
   ok: vec record {
             principal;
             int;
           };
 };
type Result_3 = 
 variant {
   err: text;
   ok: vec BanLogEntry;
 };
type Result_2 = 
 variant {
   err: text;
   ok: vec Neuron;
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type ProjectType__1 = 
 variant {
   fork;
   product;
   project;
 };
type ProjectType = 
 variant {
   fork;
   product;
   project;
 };
type ProjectLink__1 = 
 record {
   title: text;
   url: text;
 };
type ProjectLink = 
 record {
   title: text;
   url: text;
 };
type Project = 
 record {
   created_at: int;
   description: text;
   id: nat;
   index: opt nat;
   links: vec ProjectLink__1;
   logo_url: opt text;
   name: text;
   project_type: ProjectType__1;
   updated_at: int;
 };
type PartnerLink__1 = 
 record {
   title: text;
   url: text;
 };
type PartnerLink = 
 record {
   title: text;
   url: text;
 };
type Partner = 
 record {
   created_at: int;
   description: text;
   id: nat;
   index: opt nat;
   links: vec PartnerLink__1;
   logo_url: text;
   name: text;
   updated_at: int;
 };
type NeuronNameKey = 
 record {
   neuron_id: NeuronId__1;
   sns_root_canister_id: principal;
 };
type NeuronId__1 = record {id: blob;};
type NeuronId = record {id: blob;};
type Neuron = 
 record {
   id: opt NeuronId__1;
   permissions: vec record {
                      principal;
                      vec int32;
                    };
 };
type BanLogEntry = 
 record {
   admin: principal;
   ban_timestamp: int;
   expiry_timestamp: int;
   reason: text;
   user: principal;
 };
type Balance = nat;
type AppSneedDaoBackend = 
 service {
   add_admin: (principal) -> ();
   add_blacklisted_word: (text) -> (Result_1);
   add_partner: (text, text, text, vec PartnerLink, opt nat) -> (Result_5);
   add_project: (text, opt text, text, ProjectType, vec ProjectLink,
    opt nat) -> (Result_5);
   add_whitelisted_token: (WhitelistedToken) -> ();
   ban_user: (principal, nat, text) -> (Result_1);
   caller_is_admin: () -> (bool) query;
   check_ban_status: (principal) -> (Result_1) query;
   get_admins: () -> (vec principal) query;
   get_all_neuron_names: () ->
    (vec record {
           NeuronNameKey;
           record {
             text;
             bool;
           };
         }) query;
   get_all_neuron_nicknames: () -> (vec record {
                                          NeuronNameKey;
                                          text;
                                        }) query;
   get_all_principal_names: () ->
    (vec record {
           principal;
           record {
             text;
             bool;
           };
         }) query;
   get_all_principal_nicknames: () -> (vec record {
                                             principal;
                                             text;
                                           }) query;
   get_ban_log: () -> (Result_3) query;
   get_banned_users: () -> (Result_4) query;
   get_blacklisted_words: () -> (vec text) query;
   get_cached_token_meta: (principal) -> (opt TokenMeta) query;
   get_ledger_canister_ids: () -> (vec principal) query;
   get_neuron_name: (principal, NeuronId) -> (opt record {
                                                    text;
                                                    bool;
                                                  }) query;
   get_neuron_nickname: (principal, NeuronId) -> (opt text) query;
   get_partner: (nat) -> (opt Partner) query;
   get_partners: () -> (vec Partner) query;
   get_principal_name: (principal) -> (opt record {
                                             text;
                                             bool;
                                           }) query;
   get_principal_nickname: (principal) -> (opt text) query;
   get_project: (nat) -> (opt Project) query;
   get_projects: () -> (vec Project) query;
   get_swap_canister_ids: () -> (vec principal) query;
   get_user_ban_history: (principal) -> (Result_3) query;
   get_user_neurons: () -> (Result_2);
   get_whitelisted_tokens: () -> (vec WhitelistedToken) query;
   import_whitelist_from_swaprunner: () -> ();
   is_token_whitelisted: (principal) -> (bool) query;
   register_ledger_canister_id: (principal) -> ();
   register_swap_canister_id: (principal) -> ();
   remove_admin: (principal) -> ();
   remove_blacklisted_word: (text) -> (Result_1);
   remove_partner: (nat) -> (Result_1);
   remove_project: (nat) -> (Result_1);
   remove_whitelisted_token: (principal) -> ();
   send_tokens: (principal, nat, principal) -> (TransferResult);
   set_cached_token_meta: (principal, TokenMeta) -> ();
   set_neuron_name: (principal, NeuronId, text) -> (Result);
   set_neuron_nickname: (principal, NeuronId, text) -> (Result);
   set_principal_name: (text) -> (Result);
   set_principal_name_for: (principal, text, opt principal) -> (Result);
   set_principal_nickname: (principal, text) -> (Result);
   test_calculate_ban_duration: (principal) -> (nat);
   transfer_position: (principal, principal, nat) -> (TransferPositionResult);
   unban_user: (principal) -> (Result_1);
   unregister_ledger_canister_id: (principal) -> ();
   unregister_swap_canister_id: (principal) -> ();
   unverify_neuron_name: (principal, NeuronId) -> (Result);
   unverify_principal_name: (principal) -> (Result);
   update_partner: (nat, text, text, text, vec PartnerLink, opt nat) ->
    (Result_1);
   update_project: (nat, text, opt text, text, ProjectType, vec ProjectLink,
    opt nat) -> (Result_1);
   verify_neuron_name: (principal, NeuronId) -> (Result);
   verify_principal_name: (principal) -> (Result);
 };
service : () -> AppSneedDaoBackend
