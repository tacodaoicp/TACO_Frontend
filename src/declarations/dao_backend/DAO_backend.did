type VotingPowerChangesSinceResponse = 
 record {
   totalCount: nat;
   users: vec UserVotingPowerRecord;
 };
type UserVotingPowerRecord = 
 record {
   lastVotingPowerUpdate: int;
   neurons: vec NeuronVP;
   user: principal;
   votingPower: nat;
 };
type UserState = 
 record {
   allocationFollowedBy: vec record {
                               follow: principal;
                               since: int;
                             };
   allocationFollows: vec record {
                            follow: principal;
                            since: int;
                          };
   allocations: vec Allocation;
   followUnfollowActions: vec int;
   lastAllocationMaker: principal;
   lastAllocationUpdate: int;
   lastVotingPowerUpdate: int;
   neurons: vec NeuronVP;
   pastAllocations:
    vec
     record {
       allocation: vec Allocation;
       allocationMaker: principal;
       from: int;
       to: int;
     };
   votingPower: nat;
 };
type UpdateError = 
 variant {
   InvalidAllocation;
   NoVotingPower;
   NotAllowed;
   SystemInactive;
   UnexpectedError: text;
 };
type UpdateConfig__1 = 
 record {
   PRICE_HISTORY_WINDOW: opt int;
   balanceUpdateInterval: opt int;
   blockCleanupInterval: opt int;
   maxPremium: opt float64;
   maxSlippageBasisPoints: opt nat;
   minPremium: opt float64;
   minSwapValueUSD: opt float64;
   swappingEnabled: opt bool;
 };
type UpdateConfig = 
 record {
   longSyncIntervalNS: opt nat;
   maxKongswapAttempts: opt nat;
   maxPriceHistoryEntries: opt nat;
   maxSlippageBasisPoints: opt nat;
   maxTradeAttemptsPerInterval: opt nat;
   maxTradeValueICP: opt nat;
   maxTradesStored: opt nat;
   minTradeValueICP: opt nat;
   portfolioRebalancePeriodNS: opt nat;
   priceUpdateIntervalNS: opt nat;
   rebalanceIntervalNS: opt nat;
   shortSyncIntervalNS: opt nat;
   tokenSyncTimeoutNS: opt nat;
 };
type UnfollowRecord = 
 record {
   followed: principal;
   follower: principal;
   until: int;
 };
type UnfollowError = 
 variant {
   AlreadyUnfollowing;
   FollowUnfollowLimitReached;
   FolloweeIsSelf;
   FolloweeNotFound;
   FollowerNotFound;
   NotAdmin;
   NotAllowed;
   SystemInactive;
   UnexpectedError: text;
 };
type TokenType = 
 variant {
   ICP;
   ICRC12;
   ICRC3;
 };
type TokenDetails = 
 record {
   Active: bool;
   balance: nat;
   epochAdded: int;
   isPaused: bool;
   lastTimeSynced: int;
   pastPrices: vec PricePoint;
   pausedDueToSyncFailure: bool;
   priceInICP: nat;
   priceInUSD: float64;
   tokenDecimals: nat;
   tokenName: text;
   tokenSymbol: text;
   tokenTransferFee: nat;
   tokenType: TokenType;
 };
type SystemState = 
 variant {
   Active;
   Emergency;
   Paused;
 };
type SystemParameter = 
 variant {
   AllocationWindow: nat;
   FollowDepth: nat;
   LogAdmin: principal;
   MaxAllocationsPerDay: int;
   MaxFollowUnfollowActionsPerDay: nat;
   MaxFollowed: nat;
   MaxFollowers: nat;
   MaxPastAllocations: nat;
   MaxTotalUpdates: nat;
   SnapshotInterval: nat;
 };
type SyncError = 
 variant {
   NotTreasury;
   UnexpectedError: text;
 };
type Result_9 = 
 variant {
   err: AuthorizationError;
   ok: FollowActionsSinceResponse;
 };
type Result_8 = 
 variant {
   err: AuthorizationError;
   ok: NeuronUpdatesSinceResponse;
 };
type Result_7 = 
 variant {
   err: AuthorizationError;
   ok: VotingPowerChangesSinceResponse;
 };
type Result_6 = 
 variant {
   err: RefreshError;
   ok:
    record {
      aggregateUpdated: bool;
      neuronsUpdated: nat;
      newVotingPower: nat;
      oldVotingPower: nat;
    };
 };
type Result_5 = 
 variant {
   err: FollowError;
   ok: text;
 };
type Result_4 = 
 variant {
   err: SyncError;
   ok: text;
 };
type Result_3 = 
 variant {
   err: UnfollowError;
   ok: text;
 };
type Result_2 = 
 variant {
   err: UpdateError;
   ok: text;
 };
type Result_11 = 
 variant {
   err: AuthorizationError;
   ok: AdminActionsSinceResponse;
 };
type Result_10 = 
 variant {
   err: AuthorizationError;
   ok: AllocationChangesSinceResponse;
 };
type Result_1 = 
 variant {
   err: AuthorizationError;
   ok: text;
 };
type Result = 
 variant {
   err: AuthorizationError;
   ok:
    record {
      allocatedVotingPower: nat;
      neuronCount: nat;
      principalCount: nat;
      totalVotingPower: nat;
      totalVotingPowerByHotkeySetters: nat;
    };
 };
type RefreshError = 
 variant {
   NoNeuronsFound;
   NotAllowed;
   SnsGovernanceError: text;
   SystemInactive;
   UnexpectedError: text;
 };
type PricePoint = 
 record {
   icpPrice: nat;
   time: int;
   usdPrice: float64;
 };
type PastAllocationRecord = 
 record {
   allocation: vec Allocation;
   allocationMaker: principal;
   from: int;
   to: int;
   user: principal;
 };
type NeuronVP = 
 record {
   neuronId: blob;
   votingPower: nat;
 };
type NeuronUpdatesSinceResponse = 
 record {
   neurons: vec NeuronRecord;
   totalCount: nat;
 };
type NeuronRecord = 
 record {
   neuronId: blob;
   users: vec principal;
   votingPower: nat;
 };
type NeuronAllocation = 
 record {
   allocations: vec Allocation;
   lastAllocationMaker: principal;
   lastUpdate: int;
   votingPower: nat;
 };
type LogLevel = 
 variant {
   ERROR;
   INFO;
   WARN;
 };
type LogEntry = 
 record {
   component: text;
   context: text;
   level: LogLevel;
   message: text;
   timestamp: int;
 };
type HistoricBalanceAllocation = 
 record {
   allocations: vec record {
                      principal;
                      nat;
                    };
   balances: vec record {
                   principal;
                   nat;
                 };
   totalWorthInICP: nat;
   totalWorthInUSD: float64;
 };
type FollowRecord = 
 record {
   followed: principal;
   follower: principal;
   since: int;
 };
type FollowError = 
 variant {
   AlreadyFollowing;
   FollowLimitReached;
   FollowUnfollowLimitReached;
   FolloweeIsSelf;
   FolloweeLimitReached;
   FolloweeNoAllocationYetMade;
   FolloweeNotFound;
   FollowerNoAllocationYetMade;
   FollowerNotFound;
   NotAdmin;
   NotAllowed;
   SystemInactive;
   UnexpectedError: text;
 };
type FollowActionsSinceResponse = 
 record {
   follows: vec FollowRecord;
   totalCount: nat;
   unfollows: vec UnfollowRecord;
 };
type ContinuousDAO = 
 service {
   addAdmin: ("principal": principal, reason: opt text) -> (Result_1);
   addToken: (token: principal, tokenType: TokenType) -> (Result_1);
   addTokenWithReason: (token: principal, tokenType: TokenType, reason:
    text) -> (Result_1);
   admin_getNeuronAllocations: () ->
    (vec record {
           blob;
           NeuronAllocation;
         }) query;
   admin_getUserAllocation: ("principal": principal) -> (opt UserState) query;
   admin_getUserAllocations: () -> (vec record {
                                          principal;
                                          UserState;
                                        }) query;
   admin_recalculateAllVotingPower: (id: nat) -> ();
   clearLogs: () -> ();
   followAllocation: (followee: principal) -> (Result_5);
   getAdminActionsSince: (sinceTimestamp: int, limit: nat) ->
    (Result_11) query;
   getAdminPermissions: () ->
    (vec record {
           principal;
           vec AdminPermission;
         }) query;
   getAggregateAllocation: () -> (vec record {
                                        principal;
                                        nat;
                                      }) query;
   getAllocationChangesSince: (sinceTimestamp: int, limit: nat) ->
    (Result_10) query;
   getFollowActionsSince: (sinceTimestamp: int, limit: nat) ->
    (Result_9) query;
   getFollowersWithNeuronCounts: () -> (vec record {
                                              principal;
                                              nat;
                                            }) query;
   getHistoricBalanceAndAllocation: (limit: nat) ->
    (vec record {
           int;
           HistoricBalanceAllocation;
         }) query;
   getLogs: (count: nat) -> (vec LogEntry) query;
   getLogsByContext: (context: text, count: nat) -> (vec LogEntry) query;
   getLogsByLevel: (level: LogLevel, count: nat) -> (vec LogEntry) query;
   getNeuronAllocation: (neuronId: blob) -> (opt NeuronAllocation) query;
   getNeuronUpdatesSince: (sinceTimestamp: int, limit: nat) ->
    (Result_8) query;
   getSnapshotInfo: () ->
    (opt
      record {
        lastSnapshotId: nat;
        lastSnapshotTime: int;
        totalVotingPower: nat;
      }) query;
   getSystemParameters: () -> (vec SystemParameter) query;
   getTokenDetails: () -> (vec record {
                                 principal;
                                 TokenDetails;
                               }) query;
   getUserAllocation: () -> (opt UserState) query;
   getVotingPowerChangesSince: (sinceTimestamp: int, limit: nat) ->
    (Result_7) query;
   grantAdminPermission: (admin: principal, function: AdminFunction,
    durationDays: nat) -> (Result_1);
   hasAdminPermission: ("principal": principal, function: AdminFunction) ->
    (bool) query;
   pauseToken: (token: principal, reason: text) -> (Result_1);
   refreshUserVotingPower: () -> (Result_6);
   removeAdmin: ("principal": principal, reason: opt text) -> (Result_1);
   removeFollower: (follower: principal) -> (Result_5);
   removeToken: (token: principal, reason: text) -> (Result_1);
   setTacoAddress: (address: principal) -> ();
   set_sns_governance_canister_id: (p: principal) -> ();
   syncTokenDetailsFromTreasury: (tokenDetails:
    vec record {
          principal;
          TokenDetails;
        }) -> (Result_4);
   unfollowAllocation: (followee: principal) -> (Result_3);
   unpauseToken: (token: principal, reason: text) -> (Result_1);
   updateAllocation: (newAllocations: vec Allocation) -> (Result_2);
   /// * Update Minting Vault configuration
   ///  *
   ///  * Allows configuration of premium rates, update intervals, and enabling/disabling swapping
   ///  * Only callable by admins with the updateMintingVaultConfig permission.
   updateMintingVaultConfig: (config: UpdateConfig__1) -> (Result_1);
   updateSpamParameters: (params:
    record {
      allowedCalls: opt nat;
      allowedSilentWarnings: opt nat;
      timeWindowSpamCheck: opt int;
    }) -> (Result_1);
   updateSystemParameter: (param: SystemParameter, reason: opt text) ->
    (Result_1);
   updateSystemState: (newState: SystemState, reason: text) -> (Result_1);
   /// * Update treasury rebalance configuration
   ///  *
   ///  * Allows configuration of trading intervals, sizes, and safety limits
   ///  * Only callable by admins with the updateTreasuryConfig permission.
   updateTreasuryConfig: (updates: UpdateConfig, rebalanceState: opt bool,
    reason: opt text) -> (Result_1);
   votingPowerMetrics: () -> (Result) query;
 };
type AuthorizationError = 
 variant {
   NotAdmin;
   NotAllowed;
   UnexpectedError: text;
 };
type AllocationChangesSinceResponse = 
 record {
   changes: vec PastAllocationRecord;
   totalCount: nat;
 };
type Allocation = 
 record {
   basisPoints: nat;
   token: principal;
 };
type AdminPermission = 
 record {
   expiresAt: int;
   function: AdminFunction;
   grantedBy: principal;
 };
type AdminFunction = 
 variant {
   addAdmin;
   addToken;
   clearLogs;
   createAuction;
   endAuctionPanic;
   getAdminActions;
   getAllocationChanges;
   getFollowActions;
   getLogs;
   getNeuronUpdates;
   getVotingPowerChanges;
   pauseToken;
   recoverPoolBalances;
   removeAdmin;
   removeToken;
   setTacoAddress;
   setTest;
   startRebalancing;
   stopRebalancing;
   stopToken;
   unpauseToken;
   updateMintingVaultConfig;
   updateSpamParameters;
   updateSystemParameter;
   updateSystemState;
   updateTreasuryConfig;
 };
type AdminActionsSinceResponse = 
 record {
   actions: vec AdminActionRecord;
   totalCount: nat;
 };
type AdminActionType = 
 variant {
   AdminAdd: record {newAdmin: principal;};
   AdminPermissionGrant:
    record {
      durationDays: nat;
      function: text;
      targetAdmin: principal;
    };
   AdminRemove: record {removedAdmin: principal;};
   ParameterUpdate:
    record {
      newValue: text;
      oldValue: text;
      parameter: SystemParameter;
    };
   SystemStateChange: record {
                        newState: SystemState;
                        oldState: SystemState;
                      };
   TokenAdd:
    record {
      token: principal;
      tokenType: TokenType;
      viaGovernance: bool;
    };
   TokenPause: record {token: principal;};
   TokenRemove: record {token: principal;};
   TokenUnpause: record {token: principal;};
 };
type AdminActionRecord = 
 record {
   actionType: AdminActionType;
   admin: principal;
   errorMessage: opt text;
   id: nat;
   reason: text;
   success: bool;
   timestamp: int;
 };
service : () -> ContinuousDAO
